@using Budgeting.Web.App.AuthenticationProviders;
@using System.Security.Claims;

@inject AuthenticationStateProvider authStateProvider

<AuthorizeView>

    <NotAuthorized>
        <MudAppBar Elevation="2">
            <MudSpacer />
            <MudLink Href="/login" Typo="Typo.inherit">Log in</MudLink>
            &nbsp;
            |
            &nbsp;
            <MudLink Href="#" Typo="Typo.inherit">Sing up</MudLink>
        </MudAppBar>
    </NotAuthorized>

    <Authorized>
        <MudAppBar Elevation="2">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
            <MudSpacer />
            <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/MudBlazor/MudBlazor/" Target="_blank" />
            <MudText Color="Color.Inherit">@context.User.Identity!.Name</MudText>
            &nbsp;
            |
            &nbsp;
            <MudLink Href="#">Log out</MudLink>
        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
            <MudDrawerHeader>
                <MudText Color="Color.Primary" Typo="Typo.h6">Menu</MudText>
            </MudDrawerHeader>
            <MudNavMenu>
                <MudNavLink Href="" IconColor="Color.Primary" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
            </MudNavMenu>
        </MudDrawer>
    </Authorized>

</AuthorizeView>

@code {

    public class UserInfo
    {
        public string UserName { get; set; }
        public string UserEmail { get; set; }
    }

    UserInfo userInfo = new UserInfo();

    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }


    protected override async Task OnInitializedAsync()
    {
        var provider = (CustomAuthenticationProvider)authStateProvider;

        var authenticationState = await provider.GetAuthenticationStateAsync();

        if (authenticationState.User.Identity.IsAuthenticated)
        {
            userInfo.UserName = authenticationState.User.Claims.FirstOrDefault(claim => claim.Type == "UserFullName").Value;
            userInfo.UserName = authenticationState.User.Claims.FirstOrDefault(claim => claim.Type == ClaimTypes.Name).Value;
        }
    }


}